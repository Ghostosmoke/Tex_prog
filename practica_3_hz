#include <iostream>
#include <cmath>
//#include <mgl2/qt.h>
using namespace std;
double* SLAU(double** a, double* y, int n) {
    double* x, max;
    int k, index;
    const double eps = 0.00001; // точность
    x = new double[n];
    k = 0;
    while (k < n) {
        // Поиск строки с максимальным a[i][k]
        max = abs(a[k][k]);
        index = k;
        for (int i = k + 1; i < n; i++)

            if (abs(a[i][k]) > max) {

                max = abs(a[i][k]);
                index = i;
            }

        // Перестановка строк
        for (int j = 0; j < n; j++) {
            double temp = a[k][j];
            a[k][j] = a[index][j];
            a[index][j] = temp;
        }

        double temp = y[k];
        y[k] = y[index];
        y[index] = temp;
        // Нормализация уравнений
        for (int i = k; i < n; i++) {
            double temp = a[i][k];
            if (abs(temp) < eps) continue; // для нулевого коэффициента пропустить
            for (int j = 0; j < n; j++)
                a[i][j] = a[i][j] / temp;
            y[i] = y[i] / temp;
            if (i == k) continue; // уравнение не вычитать само из себя
            for (int j = 0; j < n; j++)
                a[i][j] = a[i][j] - a[k][j];
            y[i] = y[i] - y[k];
        }
        k++;
    }
    // обратная подстановка
    for (k = n - 1; k >= 0; k--) {
        x[k] = y[k];
        for (int i = 0; i < k; i++)
            y[i] = y[i] - a[i][k] * x[k];
    }
    return x;
}
double** matrix_new(double** A, int N) {
    for (int i = 0; i < N; i++)
        A[i] = new double[N];
    return A;
}
double** zero_matrix(double** A, int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            A[i][j] = 0;
        }
        return A;
    }
}
double* zero_matrix_b(double* b, int n) {
    for (int i = 0; i < n; i++) {
        b[i] = 0;
    }
    return b;
}
int main() {
    setlocale(LC_ALL, "rus");
    double* a, ** A, * b, * y1, * y2;
    int n = 9, N = 2;


    double x[9] = { 0,0.5,1,1.5,2,2.5,3,3.5,4 };
    double y[9] = { 2.31,2.899,3.534,4.412,5.578,6.92,8.699,10.69,13.39 };
    //cout << "Введите значения х и у:" << endl;

    A = new double* [N];
    b = new double[N];
    a = new double[N];
    y1 = new double[n];
    y2 = new double[n];
    A = matrix_new(A, N);
    A = zero_matrix(A, N);
    b = zero_matrix_b(b, N);
    A[0][0] = n;

    for (int i = 0; i < n; i++) {
        A[0][1] += x[i];
        A[1][0] += x[i]; A[1][1] = x[i] * x[i];
        b[0] += y[i];
        b[1] +=y[i] * x[i];
    }
    //a = SLAU(A, b, N);
    for (int i = 0; i < N; i++) {
        cout << a[i] << endl;
    }

    
    for (int i = 0; i < 9; i++)
    {
        y1[i] = a[0] * exp(a[1] * x[i]);
        y2[i] = a[0] + a[1] * x[i];
    }
    double r = 0, Mx = 0, My = 0;
    for (int i = 0; i < n; i++) {
        Mx += x[i]; My += y[i];
        
    }
    
    double chisl = 0, znam1 = 0, znam2 = 0;
    for (int i = 0; i < n; i++) {

        chisl += (x[i] - Mx / n) * (y[i] - My / n);
        znam1 += (x[i] - Mx / n) * (x[i] - Mx / n);
        znam2 += (y[i] - My / n) * (y[i] - My / n);
        
            
    }
    r = chisl / sqrt(znam1 * znam2);
    double yx = 0, xx = 0;
    for (int i = 0; i < n; i++) {
        yx += y[i] * x[i];
        xx = x[i] * x[i];
        
    }
    a[1] = (n * yx - My * Mx / n / n) / (n * xx - Mx * Mx / n / n);
    a[0] = My / n - a[1] * Mx / n;
    cout << "a:";
    cout << a[0] << "*exp^(" << a[1] << "*x)" << endl;
    cout << "\nЛиния регрессии: у=" << a[0] << "+" << a[1] << "х" << endl;
    cout << "Коэффициент корреляции: r=" << r << endl;

    return 0;
}
