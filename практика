#include <iostream>
#include <locale.h>
#include <cmath>
#include <fstream>
#include "GnuP.h"
using namespace std;

double* SLAU(double** a, double* y, int n) {
    double* x, max;
    int i, j, k, index;
    x = new double[n];
    k = 0;
    while (k < n) {
        max = fabs(a[k][k]);
        index = k;
        for (int i = k + 1; i < n; i++)
            if (fabs(a[i][k]) > max) {
                max = fabs(a[i][k]);
                index = i;
            }

        for (j = 0; j < n; j++) {
            double temp = a[k][j];
            a[k][j] = a[index][j];
            a[index][j] = temp;
        }

        double temp = y[k];
        y[k] = y[index];
        y[index] = temp;
        for (i = k; i < n; i++) {
            double temp = a[i][k];
            if (fabs(temp) < 0) continue;
            for (j = 0; j < n; j++)
                a[i][j] = a[i][j] / temp;
            y[i] = y[i] / temp;
            if (i == k)  continue;
            for (j = 0; j < n; j++)
                a[i][j] = a[i][j] - a[k][j];
            y[i] = y[i] - y[k];
        }
        k++;
    }

    for (k = n - 1; k >= 0; k--) {
        x[k] = y[k];
        for (int i = 0; i < k; i++)
            y[i] = y[i] - a[i][k] * x[k];
    }
    return x;
}

double canon_calc(double* a, int n, double* x,double t) {
    double y_kanon=0;
    int i;

    for (i = 0; i < n; i++)
            y_kanon += pow(t, i) * a[i];

    return y_kanon;
}

double* canon_polinom(int n,double*x,double *y) {
    int i,j;
    double* a, ** A, * y_slau;
    a = new double[n];
    y_slau = new double[n];
    A = new double* [n];
    for (i = 0; i < n; i++)
        A[i] = new double[n];

    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++) {
            y_slau[i] = y[i];
            A[i][j] = pow(x[i], j);
        }

    a = SLAU(A, y_slau, n);

    return a;
}

double nuton_calc(int n,double * x,double *A,double t) {
    double y_nuton,braces=1;
    int i;

    y_nuton =A[0];

    for (i = 0; i < n; i++) {
        braces *= t - x[i];
        y_nuton += A[i+1] * braces;
    }

    return y_nuton;
}

double* nuton_polinom(int n, double* x, double* y) {
    int i, j;
    double* A;
    A = new double [n];

    for (i = 0; i < n; i++)
        A[i] = y[i];

    for (j = 1; j < n; j++)
        for (i = j; i < n;i++)
            A[i] = (A[i] - A[j - 1]) / (x[i] - x[j - 1]);

    return A;
}

double lagr_calc(int n, double* x, double* y,double t) {
    double lag_polin=0,P=1;
    int i,j;

    for (i = 0; i < n; i++) {
        P = 1;
        for (j = 0; j < n; j++) {
            if (i != j) 
                P *= (t - x[j]) / (x[i] - x[j]);
        }
        lag_polin += y[i] * P;
    }

    return lag_polin;
}

double spline_calc(int n, double* x, double** a, double s) {
    double g;
    int i = 6;
    for (int ii = n; ii > -1; ii--) {
        if (s <= x[ii])i = ii;
    }
    cout<<i<<" ";
        g = a[i][0] + a[i][1] * (s - x[i]) + a[i][2] * pow((s - x[i]), 2) + a[i][3] * pow((s - x[i]), 3);
    return g;
}

double** spline_polin(int n, double* x, double* y) {
    double *h,*l,*b,*a,*c,*B,*d,**A;
    int i;
    h = new double[n];
    l = new double[n];
    b = new double[n];
    a = new double[n];
    c = new double[n];
    d = new double[n];
    B = new double[n];
    A = new double* [n];
    for (i = 0; i < n; i++)
        A[i] = new double[4];

    for (i = 1; i < n; i++) {
        h[i] = x[i] - x[i - 1];
        l[i] = (y[i] - y[i - 1]) / h[i];
    }
    b[1] = -0.5 * h[2] / (h[1] + h[2]);
    a[1] = 1.5 * (l[2]-l[1]) / (h[1] + h[2]);

    for (i = 3; i < n; i++) {
        b[i - 1] = h[i] / (2*h[i - 1] + 2*h[i] + h[i - 1]*b[i - 2]);
        a[i - 1] = (3 * l[i] - 3 * l[i - 1] - h[i - 1] * a[i - 2])/
            (2*h[i-1]+2*h[i]+h[i-1]*b[i-2]);
    }
    for (i = n; i < 2; i--) 
        c[i - 1] = b[i - 1] * c[i] + a[i - 1];

    for (i = 1; i < n; i++) {
        B[i] = l[i] + 2 * c[i] * h[i] / 3.0 + h[i] * c[i - 1] / 3.0;
        d[i] = (c[i] - c[i - 1] )/ 3 * h[i];
    }

    for (i = 0; i < n; i++) {
        A[i][0] = y[i];
        A[i][1] = B[i];
        A[i][2] = c[i];
        A[i][3] = d[i];
    }

    return A;
}

int main() {
    setlocale(LC_ALL, "rus");
    double * x, * x_i,* y;
    int n = 7,n_i=3, i,j;
    const char* FName = "data.dat";
    x = new double[n];
    y = new double[n];
    x_i = new double[n_i];

    /*double *x1,*y1,*x_i1;
    x1 = new double[n];
    y1 = new double[n];
    x_i1 = new double[n_i];
    cout << "Ââåäèòå ìàññèâ x\n";
    for (int i = 0; i < n; i++)
    {
        cin >> x1[i];
    }
    cout << "Ââåäèòå ìàññèâ y\n";
    for (int i = 0; i < n; i++)
    {
        cin >> y1[i];
    }
    cout << "Ââåäèòå ìàññèâ t\n";
    for (int i = 0; i < n_i; i++)
    {
        cin >> x_i1[i];
    }
    fstream out(FName, ios::out | ios::binary);
    out.write((char *)&n, sizeof(n));
    out.write((char *)x1, sizeof(double) * n);
    out.write((char *)y1, sizeof(double) * n);
    out.write((char *)x_i1, sizeof(double) * n_i);
    out.close();
    delete (x1);
    delete (y1);
    delete (x_i1);*/

// ñ÷èòûâàíèå çíà÷åíèé
    fstream in(FName, ios::in | ios::binary);
    in.read((char*)&n, sizeof(n));
    double* x2,*y2,*x_i2;
    x2 = new double[n];
    y2 = new double[n];
    x_i2 = new double[n_i];
    in.read((char*)x2, sizeof(double) * n);
    in.read((char*)y2, sizeof(double) * n);
    in.read((char*)x_i2, sizeof(double) * n_i);
    in.close();

    for (int i = 0; i < n; i++)
    {
        x[i] = x2[i];
        y[i] = y2[i];

    }
    for (int i = 0; i < n_i; i++)
    {
        x_i[i] = x_i2[i];
    }
    delete (x2);
    delete (y2);
    delete (x_i2);
    /*cout << "çíà÷åíèÿ õ,ó,x_i:" << endl;
    for (int i = 0; i < n; i++){
        cout << "x" << i + 1 << " = " << x[i] << endl;
    }
    for (int i = 0; i < n; i++){
        cout << "y" << i + 1 << " = " << y[i] << endl;
    }
    for (int i = 0; i < n_i; i++){
        cout << "x_i" << i + 1 << " = " << x_i[i] << endl;
    }*/

        GnuP p;

        double *y_canon,*y_nuton,*y_lagr,*y_spline;
        y_canon = new double[n];
        y_nuton = new double[n];
        y_lagr = new double[n];
        y_spline = new double[n];

        for (i = 0; i < n; i++) {
            y_canon[i] = canon_calc(canon_polinom(n, x, y), n, x, x[i]);
            y_nuton[i] = nuton_calc(n, x,nuton_polinom(n,x,y), x[i]);
            y_lagr[i] = lagr_calc( n, x ,y, x[i]);
            y_spline[i] = spline_calc(n, x,spline_polin(n,x,y), x[i]);
        }
        double* y_canon_i, * y_nuton_i, * y_lagr_i, * y_spline_i;
        y_canon_i = new double[n_i];
        y_nuton_i = new double[n_i];
        y_lagr_i = new double[n_i];
        y_spline_i = new double[n_i];

        for (i = 0; i < n_i; i++) {
            y_canon_i[i] = canon_calc(canon_polinom(n, x, y), n, x, x_i[i]);
            y_nuton_i[i] = nuton_calc(n, x, nuton_polinom(n, x, y), x_i[i]);
            y_lagr_i[i] = lagr_calc(n, x, y, x_i[i]);
            y_spline_i[i] = spline_calc(n, x, spline_polin(n, x, y), x_i[i]);
        }
        double y_line[100],x_line[100],koef;
        
        koef=(x[0]-x[n])/100;
        
        cout<<endl<<koef;
        
        for(i=0;i<100;i++){
			x_line[i]=x[n]+i*koef;
	}
		for(i=0;i<100;i++){
			y_line[i]=spline_calc(n, x, spline_polin(n, x, y), x_line[i]);
		}
        
       

        p.plotArrayPar(n, x, y, 1, 5, 11, "Dots");
        //~ p.plotArrayPar(n, x, y_canon, 2, 2, 1, "Canon. P.");
        //~ p.plotArrayPar(n, x, y_nuton, 2, 2, 2, "Newton P.");
        //~ p.plotArrayPar(n, x, y_lagr, 2, 2, 3, "Lagrang P.");
        //~ p.plotArrayPar(n, x, y_spline, 2, 2, 4, "Spline P.");

        p.plotArrayPar(n_i, x_i, y_canon_i, 1, 5, 9, "Canon dots");
        p.plotArrayPar(n_i, x_i, y_nuton_i, 1, 5, 6, "Newton dots");
        p.plotArrayPar(n_i, x_i, y_lagr_i, 1, 5, 7, "Lagrang dots");
        p.plotArrayPar(n_i, x_i, y_spline_i, 1, 5, 8, "Spline dots");
        p.plotArrayPar(100, x_line, y_line, 1, 5, 10, "Spline line");
        p.plot();
        return 0;
}
