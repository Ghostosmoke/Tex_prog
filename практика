#include <iostream> 
#include "GnuP.h" 
#include <cmath> 
//#include <mgl2/qt.h> 
using namespace std; 
 
double* SLAU(double** a, double* y, int n) { 
    double* x, max; 
    int k, index; 
    const double eps = 0.00001;  // точность 
    x = new double[n]; 
    k = 0; 
    while (k < n) { 
        // Поиск строки с максимальным a[i][k] 
        max = abs(a[k][k]); 
        index = k; 
        for (int i = k + 1; i < n; i++) 
            if (abs(a[i][k]) > max) { 
                max = abs(a[i][k]); 
                index = i; 
            } 
        // Перестановка строк 
        for (int j = 0; j < n; j++) { 
            double temp = a[k][j]; 
            a[k][j] = a[index][j]; 
            a[index][j] = temp; 
        } 
        double temp = y[k]; 
        y[k] = y[index]; 
        y[index] = temp; 
        // Нормализация уравнений 
        for (int i = k; i < n; i++) { 
            double temp = a[i][k]; 
            if (abs(temp) < eps) continue; // для нулевого коэффициента пропустить 
            for (int j = 0; j < n; j++) 
                a[i][j] = a[i][j] / temp; 
            y[i] = y[i] / temp; 
            if (i == k)  continue; // уравнение не вычитать само из себя 
            for (int j = 0; j < n; j++) 
                a[i][j] = a[i][j] - a[k][j]; 
            y[i] = y[i] - y[k]; 
        } 
        k++; 
    } 
    // обратная подстановка 
    for (k = n - 1; k >= 0; k--) { 
        x[k] = y[k]; 
        for (int i = 0; i < k; i++) 
            y[i] = y[i] - a[i][k] * x[k]; 
    } 
    return x; 
} 
 
int main() { 
    setlocale(LC_ALL, "rus"); 
    double* a, ** A, * b, *y1, *y2; 
    int n = 9, N = 2; 
    GnuP gp; 
    /*x = new double[n]; 
    y = new double[n];*/ 
    double x[9] = { 0,0.5,1,1.5,2,2.5,3,3.5,4 }; 
    double y[9] = { 2.31,2.899,3.534,4.412,5.578,6.92,8.699,10.69,13.39 }; 
    cout << "Введите значения х и у:" << endl; 
    /*for (int i = 0; i < n; i++) { 
        cout << "х" << i + 1 << "= "; 
        cin >> x[i]; 
        cout << "y" << i + 1 << "= "; 
        cin >> y[i]; 
    }*/ 
    A = new double* [N]; 
    b = new double[N]; 
    a = new double[N]; 
    y1 = new double[n]; 
    y2 = new double[n]; 
    for (int i = 0; i < N; i++) 
        A[i] = new double[N]; 
    A[0][0] = n; A[0][1] = 0; 
    A[1][0] = 0; A[1][1] = 0; 
    b[0] = 0; b[1] = 0; 
    for (int i = 1; i < n; i++) { 
        A[0][1] += x[i]; 
        A[1][0] += x[i]; A[1][1] = x[i] * x[i]; 
        if (y[i] != 0)b[0] += log(y[i]); 
        if (x[i] * y[i] != 0) b[1] += log(y[i] * x[i]); 
    } 
    a = SLAU(A, b, N); 
    a[0] = exp(a[0]); 
    cout << "a:"; 
    for (int i = 0; i < N; i++)cout << a[i] << " "; 
    cout << "\nЛиния регрессии: у=" << a[0] << "+" << a[1] << "х" << endl; 
    for (int i = 0; i < 9; i++)  
    { 
        y1[i] = a[0] * exp( a[1] * x[i]); 
        y2[i] = a[0] + a[1] * x[i]; 
    } 
    double r = 0, Mx = 0, My = 0; 
    for (int i = 0; i < n; i++) { 
        Mx += x[i]; My += y[i]; 
        if (i == n - 1) { 
            Mx /= n; 
            My /= n; 
        } 
    } 
    for (int i = 0; i < n; i++) { 
        double chisl = 0, znam1 = 0, znam2 = 0; 
        chisl += (x[i] - Mx) * (y[i] - My); 
        znam1 += (x[i] - Mx) * (x[i] - Mx); 
        znam2 += (y[i] - My) * (y[i] - My); 
        if (i == n - 1) 
            r = chisl / sqrt(znam1 * znam2); 
    } 
    cout << "Коэффициент корреляции: r=" << r << endl; 
    gp.plotArray(9, x, y, y1, y2); 
    gp.plot(); 
    return 0; 
}
